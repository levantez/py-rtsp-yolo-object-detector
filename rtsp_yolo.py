import os
os.environ["TORCH_CPP_LOG_LEVEL"] = "ERROR" # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º –≤ –ª–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è NNPACK.cpp:56] Could not initialize NNPACK! Reason: Unsupported hardware.
import cv2
import time
import logging
import multiprocessing as mp
from ultralytics import YOLO
import numpy as np
from telegram import Bot
from io import BytesIO
import asyncio
import sys

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
RTSP_STREAMS = [
    "rtsp://login:pass@192.168.01.123:554/cam1",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏
    "rtsp://login:pass@192.168.01.123:554/cam2",
]

TELEGRAM_TOKEN = "<TOKEN>"          # –ü–æ–ª—É—á–∏ –æ—Ç @BotFather
TELEGRAM_CHAT_ID = "12345"          # –ü–æ–ª—É—á–∏ —á–µ—Ä–µ–∑ @getmyid_bot

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ YOLOv8n (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–∫–∞—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
MODEL_PATH = "yolov8n.pt"

# –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —á–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
CONFIDENCE_THRESHOLD = 0.5
FRAME_SKIP = 10  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π 10-–π –∫–∞–¥—Ä ‚Üí ~2‚Äì3 FPS –ø—Ä–∏ 25‚Äì30 FPS –ø–æ—Ç–æ–∫–∞
TARGET_SIZE = (640, 480)  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è YOLOv8n

# –ö–ª–∞—Å—Å—ã YOLOv8n (COCO), –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∏:
CLASS_NAMES = {
    0: "person",
    14: "dog",
    15: "cat"
    # 1: "bicycle",
    # 2: "car",
    # 3: "motorcycle",
    # 5: "bus",
    # 7: "truck"
}

import torch
print("CUDA available:", torch.cuda.is_available())
print("CUDA version:", torch.version.cuda)
print("GPU count:", torch.cuda.device_count())
if torch.cuda.is_available():
    print("GPU name:", torch.cuda.get_device_name(0))


logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(name)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

# ==================== –û–ß–ï–†–ï–î–¨ –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô ====================
message_queue = mp.Queue()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def draw_annotations(frame, detections):
    for det in detections:
        x_min, y_min, x_max, y_max = map(int, det['bbox'])
        label = f"{det['class']} ({det['confidence']:.2f})"
        color = (0, 255, 0)

        cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), color, 2)
        cv2.putText(frame, label, (x_min, y_min - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
    return frame

def send_to_telegram(bot, chat_id, frame, camera_name, detections, queue):
    annotated_frame = draw_annotations(frame.copy(), detections)

    _, buffer = cv2.imencode('.jpg', annotated_frame, [cv2.IMWRITE_JPEG_QUALITY, 80])
    photo_bytes = buffer.tobytes()

    if len(photo_bytes) == 0:
        logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {camera_name}")
        return

    obj_counts = {}
    for det in detections:
        obj_counts[det['class']] = obj_counts.get(det['class'], 0) + 1

    summary = f"üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä–µ: {camera_name}\n"
    summary += "üîç –û–±—ä–µ–∫—Ç—ã:\n"
    for cls, count in obj_counts.items():
        summary += f"  - {cls}: {count}\n"

    queue.put({
        'photo_bytes': photo_bytes,
        'caption': summary,
        'camera_name': camera_name,
        'photo_size_kb': len(photo_bytes) / 1024
    })
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {camera_name} | –†–∞–∑–º–µ—Ä: {len(photo_bytes)/1024:.1f} KB")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ê–ú–ï–†–´ ====================

def process_camera(camera_index, rtsp_url, model_path, message_queue):
    model = YOLO(model_path)
    cap = cv2.VideoCapture(rtsp_url)
    if not cap.isOpened():
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å RTSP: {rtsp_url}")
        return

    frame_count = 0
    last_send_time = 0
    send_interval = 5

    logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å {camera_index} –∑–∞–ø—É—â–µ–Ω –¥–ª—è {rtsp_url}")

    while True:
        ret, frame = cap.read()
        if not ret:
            logger.warning(f"–ü–æ—Ç–µ—Ä—è –∫–∞–¥—Ä–∞ –≤ {rtsp_url}, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            time.sleep(1)
            cap.release()
            cap = cv2.VideoCapture(rtsp_url)
            continue

        frame_count += 1

        if frame_count % FRAME_SKIP != 0:
            continue

        resized_frame = cv2.resize(frame, TARGET_SIZE)
        results = model(resized_frame, conf=CONFIDENCE_THRESHOLD, verbose=False)[0]

        detections = []
        for box in results.boxes:
            cls_id = int(box.cls.item())
            if cls_id not in CLASS_NAMES:
                continue
            confidence = float(box.conf.item())
            x_min, y_min, x_max, y_max = map(float, box.xyxy[0])

            h, w = frame.shape[:2]
            x_min = int(x_min * w / TARGET_SIZE[0])
            y_min = int(y_min * h / TARGET_SIZE[1])
            x_max = int(x_max * w / TARGET_SIZE[0])
            y_max = int(y_max * h / TARGET_SIZE[1])

            detections.append({
                'class': CLASS_NAMES[cls_id],
                'confidence': confidence,
                'bbox': (x_min, y_min, x_max, y_max)
            })

        if detections and (time.time() - last_send_time > send_interval):
            camera_name = f"–ö–∞–º–µ—Ä–∞ {camera_index + 1}"
            send_to_telegram(None, None, frame, camera_name, detections, message_queue)  # ‚Üê –ü–ï–†–ï–î–ê–Å–ú –û–ß–ï–†–ï–î–¨!
            last_send_time = time.time()

        time.sleep(0.1)

    cap.release()

# ==================== –ê–°–ò–ù–•–†–û–ù–ù–´–ô –û–¢–ü–†–ê–í–ò–¢–ï–õ–¨ –í TELEGRAM ====================

async def telegram_sender(bot_token, chat_id, queue):
    logger.info("–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Telegram –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...")

    bot = Bot(
        token=bot_token
    )

    # –°–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–º–µ—Ä–µ
    last_sent_time = {}  # –∫–ª—é—á: –∏–º—è –∫–∞–º–µ—Ä—ã, –∑–Ω–∞—á–µ–Ω–∏–µ: timestamp (time.time())

    try:
        me = await bot.get_me()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–æ—Ç—É: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.critical(f"–ù–ï–í–û–ó–ú–û–ñ–ù–û –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API: {type(e).__name__}: {e}")
        return

    try:
        test_msg = await bot.send_message(chat_id=chat_id, text="ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å ‚Äî —á–∞—Ç ID –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        logger.info(f"–ß–∞—Ç ID {chat_id} –¥–æ—Å—Ç—É–ø–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (ID: {test_msg.message_id})")
    except Exception as e:
        logger.critical(f"–ë–æ—Ç –ù–ï –ú–û–ñ–ï–¢ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {type(e).__name__}: {e}")
        if "Forbidden" in str(e):
            logger.critical("–ù–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ Telegram: /start")
        elif "Chat not found" in str(e):
            logger.critical("–ü—Ä–æ–≤–µ—Ä—å chat_id ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890")
        return

    logger.info("Telegram sender –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")

    while True:
        try:
            msg = queue.get(timeout=3)
            photo_bytes = msg['photo_bytes']
            caption = msg['caption']
            camera_name = msg['camera_name']
            size_kb = msg['photo_size_kb']

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {camera_name} | –†–∞–∑–º–µ—Ä: {size_kb:.1f} KB")

            if not photo_bytes or len(photo_bytes) == 0:
                logger.error(f"–ü—É—Å—Ç–æ–π –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è {camera_name}")
                continue

            # –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 5 —Å–µ–∫ –Ω–∞ –∫–∞–º–µ—Ä—É
            now = time.time()
            if camera_name in last_sent_time:
                elapsed = now - last_sent_time[camera_name]
                if elapsed < 5.0:  # 5 —Å–µ–∫
                    logger.debug(f"‚è±–ü—Ä–æ–ø—É—â–µ–Ω–æ: {camera_name} ‚Äî –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 3 —Å–µ–∫. (–ø—Ä–æ—à–ª–æ: {elapsed:.1f}c)")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

            # –†–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            last_sent_time[camera_name] = now

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            try:
                message = await bot.send_photo(
                    chat_id=chat_id,
                    photo=photo_bytes,
                    caption=caption
                )
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {camera_name} | Message ID: {message.message_id}")

            except Exception as e:
                logger.error(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è {camera_name}: {type(e).__name__}: {e}")
                if "file is too big" in str(e).lower():
                    logger.error("–£–º–µ–Ω—å—à–∏ –∫–∞—á–µ—Å—Ç–≤–æ JPEG (IMWRITE_JPEG_QUALITY)")
                elif "Bad Request: wrong file identifier" in str(e):
                    logger.error("–ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å cv2.imencode()")
                elif "Forbidden" in str(e):
                    logger.error("–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —á–∞—Ç —É–¥–∞–ª—ë–Ω.")
                elif "Timed out" in str(e):
                    logger.error("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")

        except mp.queues.Empty:
            logger.debug("‚è≥ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞...")
            await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ telegram_sender: {type(e).__name__}: {e}")
            await asyncio.sleep(1)

# ==================== –¢–û–ß–ö–ê –í–•–û–î–ê ====================

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª—é–±—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ multiprocessing
    if sys.platform == "darwin":  # macOS
        mp.set_start_method('spawn', force=True)
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω start_method='spawn' –¥–ª—è macOS + Python 3.13")

    manager = mp.Manager()
    message_queue = manager.Queue()  # –æ—á–µ—Ä–µ–¥—å

    logger.info("–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RTSP —Å YOLOv8n –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º Telegram...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–∞–º–µ—Ä ‚Äî —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—ë–º –∏–º –æ—á–µ—Ä–µ–¥—å
    processes = []
    for i, rtsp_url in enumerate(RTSP_STREAMS):
        p = mp.Process(
            target=process_camera,
            args=(i, rtsp_url, MODEL_PATH, message_queue), 
            name=f"Camera_{i+1}"
        )
        p.daemon = True
        p.start()
        processes.append(p)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –∫–∞–º–µ—Ä—ã {i+1}")

    # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¢–ì
    try:
        asyncio.run(telegram_sender(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, message_queue))
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        for p in processes:
            p.terminate()
        logger.info("–í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")